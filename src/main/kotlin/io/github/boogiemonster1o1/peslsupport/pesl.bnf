{
	elementTypeHolderClass="io.github.boogiemonster1o1.peslsupport.psi.PeslTypes"
	parserClass="io.github.boogiemonster1o1.peslsupport.PeslParser"
	psiImplClassSuffix = "Impl"
	psiClassPrefix = "Pesl"
	psiPackage = "io.github.boogiemonster1o1.peslsupport.psi"
	psiImplPackage = "io.github.boogiemonster1o1.peslsupport.psi.impl"
	extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
	elementTypeClass="io.github.boogiemonster1o1.peslsupport.PeslElementType"

	tokens = [
		WHITE_SPACE = 'regexp:\s+'
		IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
		DOUBLE_QUOTE = '"'

		OP_PLUS = '+'
		OP_MINUS = '-'
		OP_MULTIPLICATION = '*'
		OP_DIVISION = '/'
		OP_NOT = '!'
		OP_ASSIGN = '='
	]
}

PeslFile ::= Definition*
Definition ::= (FunctionDefinition | Statement)
FunctionDefinition ::= function FunctionDeclName '(' ')' '{' Body '}'
Body ::= Statement*

Boolean ::= (true) | (false)
Operator ::= OP_PLUS | OP_MINUS | OP_MULTIPLICATION | OP_DIVISION | OP_NOT | OP_ASSIGN
Number ::= (0|1|2|3|4|5|6|7|8|9) ((0|1|2|3|4|5|6|7|8|9)*)
StringText ::= (0|1|2|3|4|5|6|7|8|9)? IDENTIFIER
String ::= (DOUBLE_QUOTE(StringText)?DOUBLE_QUOTE)
Value ::= Number | null | undefined  | String | Boolean | IDENTIFIER
Throwable ::= !(undefined) OperatedExpression
ContextAccess ::= IDENTIFIER '.'
FunctionDeclName ::= IDENTIFIER
FunctionCallName ::= IDENTIFIER
VariableName ::= IDENTIFIER
FunctionInvocation ::= FunctionCallName '(' ')'
Access ::= ContextAccess | (FunctionInvocation '.')
MapEntry ::= (String | VariableName) ':' OperatedExpression
ListDeclaration ::= ('[' ']') | ('[' OperatedExpression (',' OperatedExpression)* ']')
MapDeclaration ::= ('{' '}') | ('{' MapEntry (',' MapEntry)* '}')
Expression ::= (Value | FunctionInvocationStatement | ListDeclaration | MapDeclaration)
OperatedExpression ::= Expression (Operator Expression)*

Statement ::= (FunctionInvocationStatement
| ReturnStatement
| ThrowStatement
| IfStatement
| VariableDeclarationStatement
| VariableAssignmentStatement
| ForStatement
| ForeachStatement
| TryCatchStatement
) (';'?)

FunctionInvocationStatement ::= ((Access*)) FunctionInvocation
ReturnStatement ::= return OperatedExpression
ThrowStatement ::= throw Throwable
IfStatement ::= if '(' OperatedExpression ')' '{' Body '}' (else '{' Body '}')?
ForStatement ::= for '(' (VariableDeclarationStatement)? ';' (OperatedExpression)? ';' (OperatedExpression)? ')' '{' Body '}'
ForeachStatement ::= ListForeachStatement | MapForeachStatement
ListForeachStatement ::= foreach '(' VariableName ':' VariableName ')' '{' Body '}'
MapForeachStatement ::= foreach '(' '(' VariableName ',' VariableName ')' ':' VariableName ')' '{' Body '}'
VariableDeclarationStatement ::= let VariableName ('=' OperatedExpression)?
VariableAssignmentStatement ::= VariableName '=' OperatedExpression
TryCatchStatement ::= try '{' Body '}' catch '(' VariableName ')' '{' Body '}'
